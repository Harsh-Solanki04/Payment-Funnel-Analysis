--EDA
select
    *
from
    public.payment_status_log psl
join    
    public.payment_status_definitions def
    on psl.status_id=def.status_id
where
    subscription_id='38499'
order by
    subscription_id,movement_date
; 


select
    psl.subscription_id,
    max(psl.status_id) as max_status
from
    public.payment_status_log psl   
group by 
    1;


with max_status_reached as(
    select
        psl.subscription_id,
        max(psl.status_id) as max_status
    from
        public.payment_status_log psl   
    group by 
        1
)
,
payment_funnel_stages as(
    select
        subs.subscription_id,
        date_trunc('year',order_date) as order_year,
        current_payment_status,
        max_status,
        case when max_status = 1 then 'Payment Widget Opened'
            when max_status = 2 then 'Payment Entered'
            when max_status = 3 and current_payment_status = 0 then 'User Error with Payment Submission'
            when max_status = 3 and current_payment_status != 0 then 'Payment Submitted'
            when max_status = 4 and current_payment_status = 0 then 'Payment Processing Error with Vendor'
            when max_status = 4 and current_payment_status != 0 then 'Payment Success with Vendor'
            when max_status = 5 then 'Complete !'
            when max_status is null then 'User has not entered payment process'
            end as payment_funnel_stage
    from 
        public.subscriptions subs   
    left join
        max_status_reached m
        on subs.subscription_id=m.subscription_id
)
select 
    payment_funnel_stage, 
    order_year,
    count(*) num_subs
from 
    payment_funnel_stages
group by 
    1,2
order by
    2 desc;



with max_status_reached as(
    select
        psl.subscription_id,
        max(psl.status_id) as max_status
    from
        public.payment_status_log psl   
    group by 
        1
)
,
payment_funnel_stages as(
    select
        subs.subscription_id,
        date_trunc('year',order_date) as order_year,
        current_payment_status,
        max_status,
        case when max_status = 5 then 1 else 0 end as completed_payment,
        case when max_status is not null then 1 else 0 end as started_payment,
    from 
        public.subscriptions subs   
    left join
        max_status_reached m
        on subs.subscription_id=m.subscription_id
) 
select 
    sum(completed_payment) as num_subs_completed_payment,
    sum(started_payment) as num_subs_started_payment,
    count(*) as total_subs,
    (num_subs_completed_payment / total_subs)*100 as coversion_rate,
    (num_subs_completed_payment /num_subs_started_payment)*100 as workflow_completion_rate,
from
    payment_funnel_stages
;




with error_subs as (
    select
        distinct subscription_id as sub_id
    from 
        public.payment_status_log
    where
        status_id = 0
)
select 
    count(err.sub_id) *100 /count(subs.subscription_id) as perc_subs_hit_error
from 
    public.subscriptions subs
left join
    error_subs err
    on subs.subscription_id= err.sub_id;





--Above example with a sub-query
select
    (select count(distinct subscription_id) from public.payment_status_log where status_id=0) / count(*) * 100 as perc_subs_hit_error
from
    subscriptions;




with error_subs as (
    select
        distinct subscription_id as sub_id
    from 
        public.payment_status_log
    where
        status_id = 0
)
select 
    subs.subscription_id,
    case
        when err.sub_id is not null then 1
        else 0
        end as has_error 
from 
    public.subscriptions subs
left join
    error_subs err
    on subs.subscription_id= err.sub_id;




--Alternate Solution using window functions

with max_status_reached as(
    select 
        subscription_id,
        max(status_id) as max_status
    from
        public.payment_status_log
    group by
        1
)
,
subs_current_status as(
    select
        subscription_id,
        status_id as current_status,
        movement_date,
        row_number() over(partition by subscription_id order by movement_date desc) as most_recent_status
    from
        public.payment_status_log
    qualify
        most_recent_status=1
)
,
payment_funnel_stages as(
    select
        subs.subscription_id,
        date_trunc('year',order_date) as order_year,
        current_status,
        max_status,
        case when max_status = 1 then 'Payment Widget Opened'
             when max_status = 2 then 'Payment Entered'
             when max_status = 3 and current_payment_status = 0 then 'User Error with Payment Submission'
             when max_status = 3 and current_payment_status != 0 then 'Payment Submitted'
             when max_status = 4 and current_payment_status = 0 then 'Payment Processing Error with Vendor'
             when max_status = 4 and current_payment_status != 0 then 'Payment Success with Vendor'
             when max_status = 5 then 'Complete !'
             when max_status is null then 'User has not entered payment process'
             end as payment_funnel_stage
        
    from
        public.subscriptions subs
    left join
        max_status_reached m
        on subs.subscription_id=m.subscription_id
    left join
        subs_current_status curr
        on subs.subscription_id=curr.subscription_id
)
select
    payment_funnel_stage,
    count(*) as num_subs
from
    payment_funnel_stages
group by
    1;
